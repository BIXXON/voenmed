# - *- coding: utf- 8 - *-
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import CallbackQuery
from filters import IsWork, IsUser
from filters.all_filters import IsBuy
from keyboards.default import check_user_out_func, all_back_to_main_default
from loader import dp, bot
from states import StorageUsers
from utils.db_api.sqlite import *
from utils.other_func import clear_firstname, get_dates, send_all_admin
from keyboards.inline import open_profile_inl

prohibit_buy = ["xbuy_item", "not_buy_items", "buy_this_item", "buy_open_position", "back_buy_item_position",
                "buy_position_prevp", "buy_position_nextp", "buy_category_prevp", "buy_category_nextp",
                "back_buy_item_to_category", "buy_open_category"]


def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    return text.split()[1].split("-")[1] if len(text.split()) > 1 else None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
@dp.message_handler(IsWork(), state="*")
@dp.callback_query_handler(IsWork(), state="*")
async def send_work_message(message: types.Message, state: FSMContext):
    if "id" in message:
        await message.answer("üî¥ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.", parse_mode='HTML')
    else:
        await message.answer("<b>üî¥ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>", parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" –∏ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message_handler(text="‚¨Ö –ù–∞ –≥–ª–∞–≤–Ω—É—é", state="*")
async def bot_start(message: types.Message, state: FSMContext):
    await state.finish()
    first_name = clear_firstname(message.from_user.first_name)
    get_user_id = get_userx(user_id=message.from_user.id)
    if get_user_id is None:
        unique_code = extract_unique_code(message.text)
        if unique_code:
            ref_code = int(unique_code)
        else:
            ref_code = 0
        if message.from_user.username is not None:
            get_user_login = get_userx(user_login=message.from_user.username)
            if get_user_login is None:
                add_userx(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates(), ref_code)
            else:
                delete_userx(user_login=message.from_user.username)
                add_userx(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates(), ref_code)
        else:
            add_userx(message.from_user.id, message.from_user.username, first_name, 0, 0, get_dates(), ref_code)
    else:
        if first_name != get_user_id[3]:
            update_userx(get_user_id[1], user_name=first_name)
        if message.from_user.username is not None:
            if message.from_user.username.lower() != get_user_id[2]:
                update_userx(get_user_id[1], user_login=message.from_user.username.lower())
    await message.answer(f"""–í–û–ï–ù–ú–ï–î - —ç—Ç–æ –º–µ–¥. –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥—è—â–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é  –≤–æ–µ–Ω–Ω–æ-–≤—Ä–∞—á–µ–±–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É
–ó–∞–∫–∞–∑–∞–≤ —É—Å–ª—É–≥—É –≤—ã –º–æ–∂–µ—Ç–µ, —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –Ω–∞–π—Ç–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–æ–π

–í—ã–±–∏—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ

‚ùóÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
‚è∫–£–∑–Ω–∞—Ç—å —á–µ–º –º—ã –∑–∞–Ω–∏–º–∞–º—Å—è
‚è∫–£–∑–Ω–∞—Ç—å —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–∑—ã–≤–Ω–∏–∫–æ–≤
""",
                         reply_markup=check_user_out_func(message.from_user.id), parse_mode='HTML')


@dp.message_handler(CommandStart(), state="*")
async def bot_start(message: types.Message, state: FSMContext):
    await state.finish()
    first_name = clear_firstname(message.from_user.first_name)
    get_user_id = get_userx(user_id=message.from_user.id)
    unique_code = extract_unique_code(message.text)
    if get_user_id is None:
        if unique_code:
            ref_code = int(unique_code)
        else:
            ref_code = 0
        if message.from_user.username is not None:
            get_user_login = get_userx(user_login=message.from_user.username)
            if get_user_login is None:
                await send_all_admin(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{get_user[2]}")
                add_userx(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates(), ref_code)
            else:
                await send_all_admin(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{get_user[2]}")
                delete_userx(user_login=message.from_user.username)
                add_userx(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates(), ref_code)
        else:
            await send_all_admin(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{get_user[2]}")
            add_userx(message.from_user.id, message.from_user.username, first_name, 0, 0, get_dates(), ref_code)
    else:
        if first_name != get_user_id[3]:
            update_userx(get_user_id[1], user_name=first_name)
        if message.from_user.username is not None:
            if message.from_user.username.lower() != get_user_id[2]:
                update_userx(get_user_id[1], user_login=message.from_user.username.lower())
    get_user = get_userx(user_id=message.from_user.id)
    await message.answer(f"""–í–û–ï–ù–ú–ï–î - —ç—Ç–æ –º–µ–¥. –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥—è—â–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é  –≤–æ–µ–Ω–Ω–æ-–≤—Ä–∞—á–µ–±–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É
–ó–∞–∫–∞–∑–∞–≤ —É—Å–ª—É–≥—É –≤—ã –º–æ–∂–µ—Ç–µ, —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –Ω–∞–π—Ç–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–æ–π

–í—ã–±–∏—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ

‚ùóÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
‚è∫–£–∑–Ω–∞—Ç—å —á–µ–º –º—ã –∑–∞–Ω–∏–º–∞–º—Å—è
‚è∫–£–∑–Ω–∞—Ç—å —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–∑—ã–≤–Ω–∏–∫–æ–≤
""",
                             reply_markup=check_user_out_func(message.from_user.id), parse_mode='HTML')
    if unique_code == "free":
        await state.finish()
        await StorageUsers.here_name.set()
        async with state.proxy() as data:
            data["here_yslyga"] = "–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        await bot.send_message(message.from_user.id, "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
        await bot.send_message(message.from_user.id, "–î–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –§–ò–û", reply_markup=all_back_to_main_default)
