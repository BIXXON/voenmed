# - *- coding: utf- 8 - *-
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from filters import IsAdmin
from keyboards.default import get_settings_func, payment_default, get_functions_func, items_default, admins, all_back_to_main_default
from keyboards.inline import choice_way_input_payment_func, promo_key, get_u
from loader import dp, bot
from states.state_items import StoragePosition
from utils import get_dates
from utils.db_api.sqlite import *


# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì
def split_messages(get_list, count):
    return [get_list[i:i + count] for i in range(0, len(get_list), count)]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"
@dp.message_handler(IsAdmin(), text="üîë –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", state="*")
async def payments_systems(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã.", reply_markup=payment_default(), parse_mode='HTML')
    await message.answer("ü•ù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ\n"
                         "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                         "üî∏ <a href='https://vk.cc/bYjKGM'><b>–ü–æ —Ñ–æ—Ä–º–µ</b></a> - <code>–ì–æ—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã QIWI</code>\n"
                         "üî∏ <a href='https://vk.cc/bYjKEy'><b>–ü–æ –Ω–æ–º–µ—Ä—É</b></a> - <code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n"
                         "üî∏ <a href='https://vk.cc/bYjKJk'><b>–ü–æ –Ω–∏–∫–Ω–µ–π–º—É</b></a> - "
                         "<code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)</code>",
                         reply_markup=choice_way_input_payment_func(), parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
@dp.message_handler(IsAdmin(), text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", state="*")
async def settings_bot(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚öô –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.", reply_markup=get_settings_func(), parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
@dp.message_handler(IsAdmin(), text="üîÜ –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üîÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.", reply_markup=get_functions_func(message.from_user.id), parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
@dp.message_handler(IsAdmin(), text="üì∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    about_bot, lenn = get_about_bot(0)
    key_about = get_u(0, lenn)
    try:
        await message.answer(about_bot, reply_markup = get_u, parse_mode='HTML')
    except:
        await message.answer(about_bot, parse_mode='HTML')

@dp.callback_query_handler(text_startswith="next_about", state="*")
async def next_about(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    await state.finish()
    about_bot = get_about_bot(0)
    key_about = get_u(0)
    try:
        await call.message.edit_text(about_bot, reply_markup = get_u, parse_mode='HTML')
    except:
        await call.message.edit_text(about_bot, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"
@dp.message_handler(IsAdmin(), text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ üñç", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üìú",
                         reply_markup=items_default, parse_mode='HTML')


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–î
@dp.message_handler(IsAdmin(), text="/getbd", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    for admin in admins:
        with open("data/botBD.sqlite", "rb") as doc:
            await bot.send_document(admin,
                                    doc,
                                    caption=f"<b>üì¶ BACKUP</b>\n"
                                            f"<code>üïú {get_dates()}</code>", parse_mode='HTML')


def get_about_bot(remover):
    show_profit_all, show_profit_day, show_refill, show_buy_day, show_money_in_bot, show = 0, 0, 0, 0, 0, 0
    get_settings = get_settingsx()
    all_purchases = get_all_purchasesx()
    all_users = get_all_usersx()
    all_refill = get_all_refillx()
    show_users = get_all_usersx()
    show_users.reverse()
    lenn = len(show_users)
    top_don = ""
    for i in range(remover,remover+20):
        try:
            top_don += f"{i+1}. <a href='tg://user?id={show_users[i][1]}'>{show_users[i][3]}</a> - {show_users[i][8]} G\n"
        except:
            break
    show_categories = get_all_categoriesx_creat()
    show_positions = get_all_positionsx()
    show_items = get_all_itemsx()
    for purchase in all_purchases:
        show_profit_all += int(purchase[6])
        if int(get_settings[4]) - int(purchase[14]) < 86400:
            show_profit_day += int(purchase[6])
    for user in all_users:
        show_money_in_bot += int(user[4])
    for refill in all_refill:
        show_refill += int(refill[5])
        if int(get_settings[5]) - int(refill[9]) < 86400:
            show_buy_day += int(refill[5])
    message = f"""<b>üì∞ –í–°–Ø –ò–ù–§–û–†–ê–ú–¶–ò–Ø –û –ë–û–¢–ï</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üî∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: üî∂</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(show_users)}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
ü•ù –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: <code>{show_refill}—Ä—É–±</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üî∂ –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤: üî∂</b>
{top_don}
"""
    return message, lenn


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="/getitems", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_itemsx()
    len_items = len(get_items)
    if len_items >= 1:
        await message.answer("<b>üéÅ –í—Å–µ —Ç–æ–≤–∞—Ä—ã</b>\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             "<code>üìç –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞ - –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞</code>\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n", parse_mode='HTML')
        for item in get_items:
            save_items.append(f"<code>üìç {item[1]} - {item[2]}</code>")
        if len_items >= 20:
            count_split = round(len_items / 20)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message, parse_mode='HTML')
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message, parse_mode='HTML')
    else:
        await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>", parse_mode='HTML')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(IsAdmin(), text="/getposition", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_positionsx()
    len_items = len(get_items)
    if len_items >= 1:
        await message.answer("<b>üìÅ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n", parse_mode='HTML')
        for item in get_items:
            save_items.append(f"<code>{item[2]}</code>")
        if len_items >= 35:
            count_split = round(len_items / 35)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message, parse_mode='HTML')
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message, parse_mode='HTML')
    else:
        await message.answer("<b>üìÅ –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>", parse_mode='HTML')


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="/getinfoitems", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_itemsx()
    len_items = len(get_items)
    if len_items >= 1:
        await message.answer("<b>üéÅ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏</b>\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n", parse_mode='HTML')
        for item in get_items:
            get_position = get_positionx("*", position_id=item[3])
            save_items.append(f"<code>{get_position[2]} - {item[2]}</code>")
        if len_items >= 20:
            count_split = round(len_items / 20)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message, parse_mode='HTML')
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message, parse_mode='HTML')
    else:
        await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>", parse_mode='HTML')

@dp.callback_query_handler(IsAdmin(), text_startswith="delete", state="*")
async def pd_kb(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ <code>{call.data.split(':')[1]}</code>", parse_mode="HTML")
